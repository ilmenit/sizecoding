include "include/microw8-api.cwa"

global mut frame: i32 = 0;

export fn upd() {
	cls(0);	
	randomSeed(0);
    let factor: f32 = 56_f;
    let offsetX: f32 = 160_f;
    let offsetY: f32 = 120_f;
    let pi: f32 = 3.125; // 3.25	
	let angle: f32 = (frame as f32) / 220_f; 
	
	if !(frame % 31) {
		let inline channel: i32 = frame%3;
		 let inline note = 48 + (frame*5 + frame/33)%8;
		playNote(channel, note);
	}		
	frame = frame + 1;	
	
    let x: f32;
    loop xloop {
		let t: f32=0_f;
        loop tloop {
		 		
			let lazy phi: f32 = 1.5 * exp(-t / 25_f) * max(1_f,10_f-angle);								
			let p1: f32 = (1_f - (fmod((3.5 * t),6_f)) / pi);
			let p2: f32 = (1.25 * p1 * p1 - 0.25);
            let X: f32 = 1_f - p2 * p2 / 2_f;

			let p3: f32 = (1.125 * x - 1_f);
            let y: f32 = 2_f * x * x * p3 * p3 * sin(phi);

            let inline r: f32 = X * factor * (x * sin(phi) + y * cos(phi)) * max(1_f,10_f-angle);

            let pX: f32 = r * sin(t);
            let pY: f32 = r * cos(t);
            let pZ: f32 = X * factor * (x * cos(phi) - y * sin(phi));
            let inline color: f32 = ((0x52) as f32) + pZ/4_f * max(1_f,10_f-angle);

            let inline xnew: f32 = offsetX + pX * cos(angle) - pY * sin(angle) + randomf()+ randomf();
            let inline ynew: f32 = offsetY + pX * sin(angle) + pY * cos(angle) + randomf()+ randomf();

            setPixel(xnew as i32, (ynew - pZ/2_f) as i32, color as i32);

			branch_if (t := t + 0.0311279296875) < 56_f: tloop;
        }
        branch_if (x := x + 0.0311279296875) < 1_f: xloop;
    }
}


